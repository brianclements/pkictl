#!/bin/bash
##----------------
##Name: pkictl
##Description: A biased controller script to aid in common openssl management
##             tasks
##Date: 2015.01.04-03:18 
##Version: 0.5.0-alpha
##Requirements: openssl
##----------------

# Tunable settings
export ORG=${ORG:-"myorg.local"}     # Same as organizationName in openssl.cnf

# Script settings
export ROOT_DIR=${ROOT_DIR:-$PWD}

##############################################################################
## Setup
##############################################################################

init_folders() {
    if [[ -d "$caPath" ]]; then
        echo "Cannot init new CA with existing filename. Aborting."
        exit 1
    fi
    mkdir -p "${caPath}/private" "${caPath}/db" "${caPath}/crl" "${caPath}/certs"
    chmod 700 "${caPath}/private"
}

init_db() {
    cp /dev/null "${caPath}/db/${caName}.db"
    cp /dev/null "${caPath}/db/${caName}.db.attr"
    echo 01 > "${caPath}/db/${caName}.crt.srl"
    echo 01 > "${caPath}/db/${caName}.crl.srl"
}

##############################################################################
## Openssl commands
##############################################################################

gen_request() {
    openssl req -new \
        -config "$conf" \
        -out "${caPath}/${caName}.csr" \
        -keyout "${caPath}/private/${caName}.key"
    chmod 700 "${caPath}/private/${caName}.key"
}

gen_root_ca_certificate() {
    openssl ca -selfsign \
        -config "$conf" \
        -in "${caPath}/${caName}.csr" \
        -out "${caPath}/${caName}.crt" \
        -extensions root_ca_ext
    if [[ "$?" -eq 0 ]]; then
        rm "${caPath}/${caName}.csr"
    fi
}

gen_certificate() {
    openssl ca \
        -config "$conf" \
        -in "${caPath}/${caName}.csr" \
        -out "${caPath}/${caName}.crt"
    if [[ "$?" -eq 0 ]]; then
        rm "${caPath}/${caName}.csr"
    fi
}

gen_crl() {
    openssl ca -gencrl \
        -config "$conf" \
        -out "${caPath}/crl/${caName}.crl"
}

gen_pem() {
    cat "${subCert}" "${parentCert}" > \
        "${caPath}/${ORG}-${caCertDepth}.chain.pem"
}

gen_pkcs12() {
    openssl pkcs12 -export \
        -name "${caName}" \
        -inkey "${caPath}/private/${caName}.key" \
        -in "${caPath}/${caName}.crt" \
        -certfile "${caPath}/${ORG}-${signingCaLabel}.chain.pem" \
        -out "${caPath}/${caName}.p12"
}

##############################################################################
## CLI Commands
##############################################################################

rootca() {
    declare caCertDepth="root"
    declare caName="${ORG}-${caCertDepth}.ca"
    declare caPath="${ROOT_DIR}/${caName}"
    declare conf="${ROOT_DIR}/${caName}.cnf"

    case "$1" in
        init)
            init_folders 
            init_db 
            ;;
        request)
            gen_request 
            ;;
        sign)
            gen_root_ca_certificate 
            ;;
        gencrl)
            gen_crl 
            ;;
        *)
            display_usage_rootca
            ;;
    esac
}

subca() {
    declare caCertDepth=${2:-"sub"}
    declare caParentLabel=${3:-"root"}
    declare caName="${ORG}-${caCertDepth}.root.ca"
    declare caPath="${ROOT_DIR}/${caName}"
    declare conf="${ROOT_DIR}/${caName}.cnf"

    case "$1" in
        init)
            init_folders 
            init_db 
            ;;
        request)
            gen_request 
            ;;
        sign)
            if [[ "$caParentLabel" == "root" ]]; then
                declare conf="${ROOT_DIR}/${ORG}-root.ca.cnf"
            else
                declare conf="${ROOT_DIR}/${ORG}-${caParentLabel}.root.ca.cnf"
            fi
            gen_certificate 
            ;;
        gencrl)
            gen_crl 
            ;;
        genpem)
            if [[ "$caParentLabel" == "root" ]]; then
                declare caName="${ORG}-root.ca"
                declare parentCert="${ROOT_DIR}/${caName}/${caName}.crt"
            else
                declare caName="${ORG}-${caParentLabel}"
                declare parentCert="${ROOT_DIR}/${caName}.root.ca/${caName}.chain.pem"
            fi
            declare subCert="${caPath}/${ORG}-${caCertDepth}.root.ca.crt"
            gen_pem
            ;;
        *)
            display_usage_subca
            ;;
    esac
}

usercert() {
    declare userCsrLabel=${2:-"sub.sub"}
    declare signingCaLabel=${3:-"sub"}
    declare caName="${ORG}-${userCsrLabel}.root.c"
    declare caPath="${ROOT_DIR}/${ORG}-${signingCaLabel}.root.ca"

    case "$1" in
        request)
            declare conf="${ROOT_DIR}/${ORG}-${userCsrLabel}.root.c.conf"
            gen_request 
            ;;
        sign)
            declare conf="${ROOT_DIR}/${ORG}-${signingCaLabel}.root.ca.cnf"
            gen_certificate 
            ;;
        genpkcs12)
            gen_pkcs12
            ;;
        *)
            display_usage_usercert
            ;;
    esac
}

##############################################################################
## Usage Info
##############################################################################

display_usage_main() {
    echo "Usage: pkictl <subcommand> <action> <action args>"
    echo ""
    echo "Pkictl is a biased Public Key Infrastructure (PKI) management helper"
    echo "tool. It's designed to make certificate, key creation, and management"
    echo "tasks formal, easy to initiate, and easy to automate. The complexities"
    echo "of the openssl settings are to be absorbed by the various openssl.cnf"
    echo "files, saving only execution of the tasks for the script itself."
    echo ""
    echo ""
    echo -e "Subcommands:\tActions:"
    echo -e "\trootca"
    echo -e "\t\t(init|request|sign|gencrl|help)"
    echo -e "\tsubca"
    echo -e "\t\t(init|request|sign|gencrl|genpem|help) <new subca prefix label> [<signing CA label>]"
    echo -e "\tusercert"
    echo -e "\t\t(request|sign|genpkcs12|help) <request config label> <signing CA label>"
    echo -e "\thelp"
    exit 1
}

display_usage_rootca() {
    echo "Usage: pkictl rootca <action>"
    echo ""
    echo "rootca:"
    echo "Create a root private key, CSR, and self sign to make a root CA"
    echo ""
    echo "actions:"
    echo -e "\tinit"
    echo -e "\t\tCreate folder structure."
    echo -e "\trequest"
    echo -e "\t\tCreate private key and certificate request."
    echo -e "\tsign"
    echo -e "\t\tSelf sign root CSR with root private key."
    echo -e "\tgencrl"
    echo -e "\t\tGenerate initial CRL file."
    exit 1
}

display_usage_subca() {
    echo "Usage: pkictl subca <action> <new subca prefix label> [<signing CA label>]"
    echo ""
    echo "subca:"
    echo "Create a subordinate private key, CSR, and CA named <new subca prefix label>"
    echo "and sign it with senior CA named <signing CA label>."
    echo ""
    echo "<new subca prefix label> must be supplied on every action usage."
    echo "<signing CA label> is only needed on \"sign\" and \"genpem\" subcommands."
    echo ""
    echo "actions:"
    echo -e "\tinit"
    echo -e "\t\tCreate folder structure."
    echo -e "\trequest"
    echo -e "\t\tCreate private key and certificate request."
    echo -e "\tsign"
    echo -e "\t\tSign <new subca prefix label> CSR with private key from"
    echo -e "\t\t<signing CA label> CA."
    echo -e "\tgencrl"
    echo -e "\t\tGenerate initial CRL file."
    echo -e "\tgenpem"
    echo -e "\t\tConcatenate senior CA <signing CA label> certificate or"
    echo -e "\t\tcertificate chain with newly generated <new subca prefix label>"
    echo -e "\t\tcertificate."
    exit 1
}

display_usage_usercert() {
    echo "Usage: pkictl usercert <action> <request config label> <signing CA label>"
    echo ""
    echo "usercert:"
    echo "Create a user CSR, private key, certificate, and PKCS#12 bundle named"
    echo "<request config label> and sign with subordinate CA named <signing CA label>."
    echo ""
    echo ""
    echo "actions:"
    echo -e "\trequest"
    echo -e "\t\tCreate private key and certificate request."
    echo -e "\tsign"
    echo -e "\t\tSign <request config label> CSR with private key from"
    echo -e "\t\t<signing CA label> CA."
    echo -e "\tgenpkcs12"
    echo -e "\t\tPackage user private key, signed certificate, and CA certificate"
    echo -e "\t\tchain in a PKCS#12 bundle for export."
    exit 1
}

##############################################################################
## Main
##############################################################################

main() {
    set -eo pipefail
    case "$1" in
        rootca)
            declare action="$2"
            rootca "$action"
            ;;
        subca)
            declare action="$2" subCaLabel="$3" subCaParentLabel=${4:-root}
            subca "$action" "$subCaLabel" "$subCaParentLabel"
            ;;
        usercert)
            declare action="$2" csrLabel="$3" caParentLabel=${4:-"sub"}
            usercert "$action" "$csrLabel" "$caParentLabel"
            ;;
        *)
            display_usage_main
            ;;
    esac
}

##############################################################################
## Runtime
##############################################################################
main "$@"
