#!/bin/bash
##----------------
##Name: pkictl
##Description: A biased controller script to aid in common openssl management
##             tasks
##Date: 2015.01.08-01:39 
##Version: 0.6.0-alpha
##Requirements: openssl
##----------------

# Tunable settings
export PKICTL_ORG=${PKICTL_ORG:-"myorg.local"}     # Same as organizationName in openssl.cnf

# Script settings
export PKICTL_ROOT_DIR=${PKICTL_ROOT_DIR:-$PWD}

##############################################################################
## Setup
##############################################################################

init_folders() {
    if [[ -d "$caPath" ]]; then
        echo "Cannot init new CA with existing filename. Aborting."
        exit 1
    fi
    mkdir -p "${caPath}/private" "${caPath}/db" "${caPath}/crl" "${caPath}/certs"
    chmod 700 "${caPath}/private"
}

init_db() {
    cp /dev/null "${caPath}/db/${caName}.db"
    cp /dev/null "${caPath}/db/${caName}.db.attr"
    echo 01 > "${caPath}/db/${caName}.crt.srl"
    echo 01 > "${caPath}/db/${caName}.crl.srl"
}

##############################################################################
## Openssl commands
##############################################################################

gen_request() {
    openssl req -new \
        -config "$conf" \
        -out "${caPath}/${caName}.csr" \
        -keyout "${caPath}/private/${caName}.key"
    chmod 700 "${caPath}/private/${caName}.key"
}

sign_root_ca_request() {
    if [[ "$PKICTL_CA_EXTENSIONS" == "" ]] && [[ "$PKICTL_CA_POLICY" == "" ]]; then
        openssl ca -selfsign \
            -config "$conf" \
            -in "${caPath}/${caName}.csr" \
            -out "${caPath}/${caName}.crt"
    elif [[ "$PKICTL_CA_EXTENSIONS" != "" ]] && [[ "$PKICTL_CA_POLICY" == "" ]]; then
        openssl ca -selfsign \
            -config "$conf" \
            -in "${caPath}/${caName}.csr" \
            -out "${caPath}/${caName}.crt" \
            -extensions "$PKICTL_CA_EXTENSIONS"
    elif [[ "$PKICTL_CA_EXTENSIONS" == "" ]] && [[ "$PKICTL_CA_POLICY" != "" ]]; then
        openssl ca -selfsign \
            -config "$conf" \
            -in "${caPath}/${caName}.csr" \
            -out "${caPath}/${caName}.crt" \
            -policy "$PKICTL_CA_POLICY"
    else
        openssl ca -selfsign \
            -config "$conf" \
            -in "${caPath}/${caName}.csr" \
            -out "${caPath}/${caName}.crt" \
            -policy "$PKICTL_CA_POLICY" \
            -extensions "$PKICTL_CA_EXTENSIONS"
    fi

    if [[ "$?" -eq 0 ]]; then
        rm "${caPath}/${caName}.csr"
    fi
}

sign_request() {
    if [[ "$PKICTL_CA_EXTENSIONS" == "" ]] && [[ "$PKICTL_CA_POLICY" == "" ]]; then
        openssl ca \
            -config "$conf" \
            -in "${caPath}/${caName}.csr" \
            -out "${caPath}/${caName}.crt"
    elif [[ "$PKICTL_CA_EXTENSIONS" != "" ]] && [[ "$PKICTL_CA_POLICY" == "" ]]; then
        openssl ca \
            -config "$conf" \
            -in "${caPath}/${caName}.csr" \
            -out "${caPath}/${caName}.crt" \
            -extensions "$PKICTL_CA_EXTENSIONS"
    elif [[ "$PKICTL_CA_EXTENSIONS" == "" ]] && [[ "$PKICTL_CA_POLICY" != "" ]]; then
        openssl ca \
            -config "$conf" \
            -in "${caPath}/${caName}.csr" \
            -out "${caPath}/${caName}.crt" \
            -policy "$PKICTL_CA_POLICY"
    else
        openssl ca \
            -config "$conf" \
            -in "${caPath}/${caName}.csr" \
            -out "${caPath}/${caName}.crt" \
            -policy "$PKICTL_CA_POLICY" \
            -extensions "$PKICTL_CA_EXTENSIONS"
    fi

    if [[ "$?" -eq 0 ]]; then
        rm "${caPath}/${caName}.csr"
    fi
}

gen_crl() {
    openssl ca -gencrl \
        -config "$conf" \
        -out "${caPath}/crl/${caName}.crl"
}

gen_pem() {
    cat "${subCert}" "${parentCert}" > \
        "${caPath}/${PKICTL_ORG}-${caCertDepth}.chain.pem"
}

gen_pkcs12() {
    openssl pkcs12 -export \
        -name "${caName}" \
        -inkey "${caPath}/private/${caName}.key" \
        -in "${caPath}/${caName}.crt" \
        -certfile "${caPath}/${PKICTL_ORG}-${signingCaLabel}.chain.pem" \
        -out "${caPath}/${caName}.p12"
}

revoke_cert() {
    PKICTL_CRL_REASON=${PKICTL_CRL_REASON:-"unspecified"}
    openssl ca \
        -config "$conf" \
        -revoke "${caPath}/${caName}.crt" \
        -crl_reason "$PKICTL_CRL_REASON"
}

##############################################################################
## CLI Commands
##############################################################################

rootca() {
    declare caCertDepth="root"
    declare caName="${PKICTL_ORG}-${caCertDepth}.ca"
    declare caPath="${PKICTL_ROOT_DIR}/${caName}"
    declare conf="${PKICTL_ROOT_DIR}/${caName}.cnf"

    case "$1" in
        init)
            init_folders 
            init_db 
            ;;
        request)
            gen_request 
            ;;
        sign)
            declare PKICTL_CA_POLICY=${PKICTL_CA_POLICY:-""}
            declare PKICTL_CA_EXTENSIONS=${PKICTL_CA_EXTENSIONS:-"root_ca_ext"}
            sign_root_ca_request 
            ;;
        gencrl)
            gen_crl 
            ;;
        *)
            display_usage_rootca
            ;;
    esac
}

subca() {
    declare caCertDepth=${2:-"sub"}
    declare caParentLabel=${3:-"root"}
    declare caName="${PKICTL_ORG}-${caCertDepth}.root.ca"
    declare caPath="${PKICTL_ROOT_DIR}/${caName}"
    declare conf="${PKICTL_ROOT_DIR}/${caName}.cnf"

    case "$1" in
        init)
            init_folders 
            init_db 
            ;;
        request)
            gen_request 
            ;;
        sign)
            if [[ "$caParentLabel" == "root" ]]; then
                declare conf="${PKICTL_ROOT_DIR}/${PKICTL_ORG}-root.ca.cnf"
            else
                declare conf="${PKICTL_ROOT_DIR}/${PKICTL_ORG}-${caParentLabel}.root.ca.cnf"
            fi
            declare PKICTL_CA_POLICY=${PKICTL_CA_POLICY:-""}
            declare PKICTL_CA_EXTENSIONS=${PKICTL_CA_EXTENSIONS:-""}
            sign_request 
            ;;
        gencrl)
            gen_crl 
            ;;
        genpem)
            if [[ "$caParentLabel" == "root" ]]; then
                declare caName="${PKICTL_ORG}-root.ca"
                declare parentCert="${PKICTL_ROOT_DIR}/${caName}/${caName}.crt"
            else
                declare caName="${PKICTL_ORG}-${caParentLabel}"
                declare parentCert="${PKICTL_ROOT_DIR}/${caName}.root.ca/${caName}.chain.pem"
            fi
            declare subCert="${caPath}/${PKICTL_ORG}-${caCertDepth}.root.ca.crt"
            gen_pem
            ;;
        revoke)
            if [[ "$caParentLabel" == "root" ]]; then
                declare conf="${PKICTL_ROOT_DIR}/${PKICTL_ORG}-${caParentLabel}.ca.cnf"
            else
                declare conf="${PKICTL_ROOT_DIR}/${PKICTL_ORG}-${caParentLabel}.root.ca.cnf"
            fi
            revoke_cert
            if [[ "$caParentLabel" == "root" ]]; then
                declare caName="${PKICTL_ORG}-${caParentLabel}.ca"
            else
                declare caName="${PKICTL_ORG}-${caParentLabel}.root.ca"
            fi
            declare caPath="${PKICTL_ROOT_DIR}/${caName}"
            echo "Regenerating CRL..."
            gen_crl 
            ;;
        *)
            display_usage_subca
            ;;
    esac
}

eecert() {
    declare eeCsrLabel=${2:-"sub.sub"}
    declare signingCaLabel=${3:-"sub"}
    declare caName="${PKICTL_ORG}-${eeCsrLabel}.root.c"
    declare caPath="${PKICTL_ROOT_DIR}/${PKICTL_ORG}-${signingCaLabel}.root.ca"

    case "$1" in
        request)
            declare conf="${PKICTL_ROOT_DIR}/${PKICTL_ORG}-${eeCsrLabel}.root.c.conf"
            gen_request 
            ;;
        sign)
            declare conf="${PKICTL_ROOT_DIR}/${PKICTL_ORG}-${signingCaLabel}.root.ca.cnf"
            declare PKICTL_CA_POLICY=${PKICTL_CA_POLICY:-""}
            declare PKICTL_CA_EXTENSIONS=${PKICTL_CA_EXTENSIONS:-""}
            sign_request 
            ;;
        genpkcs12)
            gen_pkcs12
            ;;
        revoke)
            declare conf="${PKICTL_ROOT_DIR}/${PKICTL_ORG}-${signingCaLabel}.root.ca.cnf"
            declare caName="${PKICTL_ORG}-${eeCsrLabel}.root.c"
            revoke_cert
            declare caName="${PKICTL_ORG}-${caParentLabel}.root.ca"
            declare caPath="${PKICTL_ROOT_DIR}/${caName}"
            echo "Regenerating CRL..."
            gen_crl 
            ;;
        *)
            display_usage_eecert
            ;;
    esac
}

##############################################################################
## Usage Info
##############################################################################

display_usage_main() {
    cat <<EOF
Usage: pkictl <subcommand> <action> <action args>

Pkictl is a biased Public Key Infrastructure (PKI) management helper tool.
It's designed to make certificate, key creation, and management tasks formal,
easy to initiate, and easy to automate. The complexities of the openssl
settings are to be absorbed by the various openssl.cnf files, saving only
execution of the tasks for the script itself.

Subcommands:    Actions:
    rootca
                (init|request|sign|gencrl|help)

    subca
                (init|request|sign|gencrl|genpem|revoke|help) <subca label> [<signing CA label>]

    eecert
                (request|sign|genpkcs12|revoke|help) <request label> <signing CA label>

    help
EOF
    exit 1
}

display_usage_rootca() {
    cat <<EOF
Usage: pkictl rootca <action>

Create a root private key, CSR, and self sign to make a root CA.

actions:
    init
            Create folder structure.

    request
            Create private key and certificate request.

    sign
            Self sign root CSR with root private key.

    gencrl
            Generate initial CRL file.
EOF
    exit 1
}

display_usage_subca() {
    cat <<EOF
Usage: pkictl subca <action> <subca label> [<signing CA label>]

Create a subordinate private key, CSR, and CA named <subca label> and sign it
with senior CA named <signing CA label>.

Labeling Arguments:
<subca label> must be supplied on every action usage. It is made up of the
sub-levels from root and must coincide with the filename of its configuration
file. So if \$PKICTL_ORG was "sample.org", the root CA is named
"sample.org-root.ca". A subordinate CA below this one could have the name
"sub". It would be named "sample.org-sub.root.ca". In these examples, the
<subca label> is "sub" while the <signing CA label> would be "root". A
third level below that could be "tls.sub", its name would be
"sample.org-tls.sub.root.ca" and the <subca label> for it would be
"tls.sub".

actions:
    init <subca label>
            Create folder structure.

    request <subca label>
            Create private key and certificate request.

    sign <subca label> <signing CA label>
            Sign <subca label> CSR with private key from <signing CA label> CA.

    gencrl <subca label>
            Generate initial CRL file.

    genpem <subca label> <signing CA label>
            Concatenate senior CA <signing CA label> certificate or certificate
            chain with newly generated <subca label> certificate.

    revoke <subca label> <signing CA label>
            Revoke issued certificate <subca label> with CA <signing CA label>
            and automatically generate new CRL for CA <signing CA label>
EOF
    exit 1
}

display_usage_eecert() {
    cat <<EOF
Usage: pkictl eecert <action> <request label> <signing CA label>

Create an end entity CSR, private key, certificate, and PKCS#12 bundle named
<request label> and sign with subordinate CA named <signing CA label>.
Optionally, revoke issued end entity certificate <request label> with CA named
<signing CA label>.

Labeling Arguments:
<request label> must be supplied on every action usage. It is made up of the
sub-levels from root and must coincide with the filename of its configuration
file. So if \$PKICTL_ORG was "sample.org", the root CA is named
"sample.org-root.ca". A subordinate signing CA two levels below could be
"tls.sub", its name would be "sample.org-tls.sub.root.ca" and its label
"tls.sub". An end entity certificate request could be named "user.tls.sub".
Its full name would be "sample.org-user.tls.sub.root.c". Notice that for user
certificate requests, we change the suffix to "c" from "ca". This is to label
each as "certificate" or "certificate authority" respectively. To sign this
configuration, we use "user.tls.sub" as our <request label> and "tls.sub" as
our <signing CA label>.

actions:
    request <request label> <signing CA label>
            Create private key and certificate request for <request label>.
            CSR can be found in folder for <signing CA label>.

    sign <request label> <signing CA label>
            Sign <request label> CSR with private key from <signing CA label>
            CA.

    genpkcs12 <request label> <signing CA label>
            Package ee private key and signed certificate for <request
            label> with CA certificate chain from <signing CA label> in a
            PKCS#12" bundle for export.

    revoke <request label> <signing CA label>
            Revoke issued certificate <request label> with CA <signing CA
            label> and automatically generate new CRL for CA <signing CA
            label>.
EOF
    exit 1
}

##############################################################################
## Main
##############################################################################

main() {
    set -eo pipefail
    case "$1" in
        rootca)
            declare action="$2"
            rootca "$action"
            ;;
        subca)
            declare action="$2" subCaLabel="$3" subCaParentLabel=${4:-root}
            subca "$action" "$subCaLabel" "$subCaParentLabel"
            ;;
        eecert)
            declare action="$2" csrLabel="$3" caParentLabel=${4:-"sub"}
            eecert "$action" "$csrLabel" "$caParentLabel"
            ;;
        *)
            display_usage_main
            ;;
    esac
}

##############################################################################
## Runtime
##############################################################################
main "$@"
